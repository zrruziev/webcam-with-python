
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import filedialog
import serial as sr
import cv2
import time
import os
import webbrowser
import sys
from tkinter import *
from threading import Timer
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def warning():
  canvas.itemconfig(text1, text = "")


def start():
  t = Timer(.001, warning)
  t.start()
  t = Timer(.01, zrrFunc)
  t.start()
  t = Timer(3.0, warning)
  t.start()


def getFolderPath():
  entry_2.delete(0, END)
  folder_selected = filedialog.askdirectory()
  entry_2.insert(END, '')
  entry_2.insert(END, folder_selected)
  
def koolsign():
  webbrowser.open_new_tab("http://www.zrruziev.com")


def zrrFunc():


  imgName = entry_1.get()
  folderPath = entry_2.get()
  if imgName == "" or folderPath == "" : 
    canvas.itemconfig(text1, fill="#B32536", text = "Please fill out all fields!", font=("Montserrat Bold", 28 * -1))
    return 
  entry_1.delete(0, END)
  entry_2.delete(0, END)

  if not os.path.exists(folderPath):
    try:
      os.mkdir(folderPath)
      os.system("cls")
      if "/" in str(folderPath):
        print("Images will be saved '{}'".format(folderPath))
        canvas.itemconfig(text2, text = "Images will be saved in")
        canvas.itemconfig(text3, text = "{}".format(folderPath))
      else:
        print("Images will be saved in '{}/{}'\n".format(os.getcwd(),folderPath))
        canvas.itemconfig(text2, text = "Images will be saved in")
        canvas.itemconfig(text3, text = "{}/{}".format(os.getcwd(),folderPath))
    except FileNotFoundError:
      canvas.itemconfig(text2, text = "Please enter a Valid path or a Folder name!")
      print("\n'{}' directory Not Found!".format(folderPath))
      print("Please enter a Valid directory or a Folder name!\n")
      def clearErr():
        canvas.itemconfig(text2, text = "")
      t = Timer(3.0, clearErr)
      t.start()
      return

  else:
    try:
      os.system("cls")
      if "/" in str(folderPath):
        print("Images will be saved '{}'".format(folderPath))
        canvas.itemconfig(text2, text = "Images will be saved in")
        canvas.itemconfig(text3, text = "{}".format(folderPath))
      else:
        print("Images will be saved in '{}/{}'\n".format(os.getcwd(),folderPath))
        canvas.itemconfig(text2, text = "Images will be saved in")
        canvas.itemconfig(text3, text = "{}/{}".format(os.getcwd(),folderPath))
    except FileNotFoundError:
      canvas.itemconfig(text2, text = "Please enter a Valid path or a Folder name!")
      print("\n'{}' directory Not Found!".format(folderPath))
      print("Please enter a Valid directory or a Folder name!\n")
      def clearErr():
        canvas.itemconfig(text2, text = "")
      t = Timer(3.0, clearErr)
      t.start()
      return
  if button_1["state"] == "normal":
     button_1["state"] = "disabled"
      
    ############### Control Webcams ############### 
  global stopping
  stopping = False
  capture = cv2.VideoCapture(0, cv2.CAP_DSHOW)
  capture.set(3, 640)
  capture.set(4, 480)
  start_time = time.time()
  i = 1
  while i <= 10:
    if stopping == False:
        pass
    if stopping == True:
        canvas.itemconfig(text1, fill="#B32536", text = "Forcibly Stopped!", font=("Montserrat Bold", 28 * -1))
        canvas.itemconfig(text2, text = "Images were saved in")
        if button_1["state"] == "disabled":
            button_1["state"] = "normal"
        t = Timer(5.0, warning)
        t.start()
        break

    ret, frame = capture.read()
    # gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    cv2.imshow('webcam', frame)
    if stopping == True:
        canvas.itemconfig(text1, fill="#B32536", text = "Forcibly Stopped!", font=("Montserrat Bold", 28 * -1))
        canvas.itemconfig(text2, text = "Images were saved in")
        if button_1["state"] == "disabled":
            button_1["state"] = "normal"
        t = Timer(5.0, warning)
        t.start()
        break
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
    if time.time() - start_time >= 2: #<---- Check if 2 sec passed
        img_name = "{}_{}.png".format(imgName, i)
        path = '{}'.format(folderPath)
        cv2.imwrite(os.path.join(path, img_name), frame)
        print("{}_{}_done!".format(imgName,i))
        canvas.itemconfig(text1, fill="#381BEE", font=("Montserrat Bold", 24 * -1), text = "{}_{}_done!".format(imgName,i))
        start_time = time.time()
        i += 1
    if i == 11 :
        canvas.itemconfig(text1, fill="#381BEE", font=("Montserrat Bold", 24 * -1), text = "10 pictures was taken!".format(imgName,i))
        if button_1["state"] == "disabled":
           button_1["state"] = "normal"
        break

# Stop the Process Forcibly
def stopfun():
  global stopping
  stopping = True
  def sssd():
    if button_1["state"] == "disabled":
       button_1["state"] = "normal"
  t = Timer(1.0, sssd)
  t.start()

# ####################################################
window = Tk()
window.title("10-webcam-picture")


window.geometry("401x547")
window.configure(bg = "#F8F8F8")


canvas = Canvas(
    window,
    bg = "#F8F8F8",
    height = 547,
    width = 401,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    7.105427357601002e-15,
    401.0,
    547.0,
    fill="#F3F3F3",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("zrruziev.png"))
image_1 = canvas.create_image(
    203.0,
    472.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=start,
    relief="flat"
)
button_1.place(
    x=62.0,
    y=282.0,
    width=133.0,
    height=49.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=stopfun,
    relief="flat"
)
button_2.place(
    x=213.0,
    y=282.0,
    width=132.0,
    height=49.0
)

canvas.create_text(
    53.0,
    88.0,
    anchor="nw",
    text="Image name",
    fill="#000000",
    font=("Montserrat Medium", 16 * -1)
)

canvas.create_text(
    53.0,
    180.0,
    anchor="nw",
    text="Path for images",
    fill="#000000",
    font=("Montserrat Medium", 16 * -1)
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    201.0,
    224.0,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    font=("Roboto Medium", 14 * -1)
)
entry_2.place(
    x=61.0,
    y=209.0,
    width=280.0,
    height=35.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    201.0,
    132.0,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#FFFFFF",
    highlightthickness=0,
    font=("Roboto Medium", 14 * -1)

)
entry_1.place(
    x=61.0,
    y=117.0,
    width=280.0,
    height=35.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=getFolderPath,
    relief="flat"
)
button_3.place(
    x=316.0,
    y=212.0,
    width=30.0,
    height=29.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=koolsign,
    relief="flat"
)
button_4.place(
    x=142.0,
    y=520.0,
    width=122.0,
    height=16.0
)

text1 = canvas.create_text(
    50.0,
    30.0,
    anchor="nw",
    text="",
    fill="#F24343",
    font=("Montserrat Medium", 26 * -1)
)

text2 = canvas.create_text(
    53.0,
    347.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Roboto", 14 * -1)
)

text3 = canvas.create_text(
    51.0,
    366.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Roboto", 14 * -1)
)
window.resizable(False, False)
window.mainloop()
